using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public enum DisplayType {
    UIDOC,
    WORLDSPACE,
    MEOTHRA
}
// Enemy Intents are generated by enemy behaviors
// Each enemy type has an enemy behavior, which has a
// list of enemy intents it draws from at random
// Enemy brain will be stateful, choosing its intent on
// a prepare() method call, and then executing it on an invoke() method call
[CreateAssetMenu(
    fileName = "EnemyType",
    menuName = "Enemies/Enemy Type")]
public class EnemyTypeSO : IdentifiableSO
{
    public string displayName;
    public int maxHealth;
    public int baseAttackDamage;
    public DisplayType enemyDisplayType = DisplayType.UIDOC;
    [Space]
    public Sprite sprite;
    public Sprite backgroundImage;
    public Sprite entityFrame;

    // Control what happens when the enemy's friends die :(
    public EnemyMorale morale;

    [SerializeReference]
    public List<EntityAbility> abilities;

    public List<CacheConfiguration> cacheValueConfigs;

    public EnemyBrain enemyPattern;

    public EnemyBrain belowHalfHPEnemyPattern;
    public EnemyBrain adaptWhenAloneEnemyPattern;
    public List<InitialStatus> initialStatuses = new List<InitialStatus>();
    public TooltipViewModel tooltip;

    [Header("Ascension Modifiers For This Enemy Type")]
    [SerializeField]
    private int DEADLIER_ENEMY_BONUS_STR = -1;
    public int DeadlierEnemyBonusStr
    {
        get
        {
            return DEADLIER_ENEMY_BONUS_STR;
        }
    }
    [SerializeField]
    private int HEALTHIER_ENEMY_BONUS_HEALTH = -1;
    public int HealthierEnemyBonusHealth
    {
        get
        {
            return HEALTHIER_ENEMY_BONUS_HEALTH;
        }
    }
}

public enum EnemyMorale {
    Unrelenting,  // By default, enemies stay until they die.
    AdaptWhenAlone,  // Fall back on the alone pattern if there are no Unrelenting enemies left ;(
}

[System.Serializable]
public class InitialStatus {
    public StatusEffectType status;
    public int scale;
}
